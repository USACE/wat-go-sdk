package pluginmanager

/*
The main elements of concern in a plugin are the following elements:
1. A Manifest Definition File
2. A Manifest file
3. A Payload File

## Manifest Definition
	Responsible for describing the possible inputs and outputs that a plugin container can work with
	- describes optional and required inputs and outputs
	- is supplied with a registerd plugin
	- does not change model for model.
## Manifest File
	Specific to a model, describes the specific inputs and outputs for a model based on the manifest definition
	- describes selected inputs and outputs
	- is defined by an MCAT and mutated by a user to reflect sources for specific inputs
	- changes model for model
## Payload file
	Specific to a model and event
	- describes where inputs can be found and where to put outputs
	- is generated by wat
	- changes event by event for a given model
*/
// Payload
type Payload struct {
	ModelConfiguration `json:"model_configuration" yaml:"model_configuration"`
	ModelLinks         `json:"model_links" yaml:"model_links"`
}

// ModelLinks
type ModelLinks struct {
	Inputs  []LinkedDataDescription `json:"inputs" yaml:"inputs"`
	Outputs []LinkedDataDescription `json:"outputs" yaml:"outputs"`
}

//LinkedDataDescription
type LinkedDataDescription struct {
	DataDescription `json:"description" yaml:"description"`
	ResourceInfo    `json:"resource_info" yaml:"resource_info"`
}

//ModelDefinition
type ModelDefinition struct {
	InputData
	OutputData string
}
type InputData struct {
	Optional []Input
	Required []Input
}
type OutputData struct {
	//not sure if we need optional vs required. everything is optional?
	Optional []Output
	Required []Output
}
type Input struct {
	AcceptableFormats []string //.csv, .dss, airflow,
	Name              string
	Type              string
}
type Output struct {
	Format string //.csv, .dss,
	Name   string
	Type   string
}

//ModelManifest
type ModelManifest struct {
	Plugin             `json:"plugin" yaml:"plugin"`
	ModelConfiguration `json:"model_configuration" yaml:"model_configuration"`
	Inputs             []DataDescription `json:"inputs" yaml:"inputs"`
	Outputs            []DataDescription `json:"outputs" yaml:"outputs"`
}

// ModelConfiguration
type ModelConfiguration struct {
	Name        string `json:"name" yaml:"name"`
	Alternative string `json:"alternative,omitempty" yaml:"alternative,omitempty"`
}

//ResourceInfo
type ResourceInfo struct {
	Scheme    string `json:"scheme" yaml:"scheme"`                         // s3, azure, local, queue?
	Authority string `json:"authority" yaml:"authority"`                   // bucket, rootdir, queue?
	Path      string `json:"path,omitempty" yaml:"path,omitempty"`         // path to object
	Fragment  string `json:"fragment,omitempty" yaml:"fragment,omitempty"` // hdf path, dss path, etc
}

//DataDescription
type DataDescription struct {
	Name      string `json:"name" yaml:"name"`
	Parameter string `json:"parameter" yaml:"parameter"`
	Format    string `json:"format" yaml:"format"`
}

// Plugin
type Plugin struct {
	Name        string   `json:"name" yaml:"name"`
	ImageAndTag string   `json:"image_and_tag" yaml:"image_and_tag"`
	Command     []string `json:"command" yaml:"command"`
}
